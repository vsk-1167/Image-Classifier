{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["stateMachine","initial","states","on","next","loadingModel","awaitUpload","ready","showImage","classifying","complete","showResults","App","useReducer","currentState","event","state","dispatch","useState","model","setModel","imageURL","setImageUrl","results","setResults","inputRef","useRef","imageRef","buttonProps","text","action","a","mobilenet","mobilenetModel","current","click","classify","alt","src","ref","type","accept","capture","onChange","e","target","files","length","url","URL","createObjectURL","map","className","probability","key","toFixed","onClick","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","then","registration","unregister"],"mappings":"sVAKMA,G,MAAe,CACnBC,QAAS,UACTC,OAAQ,CACND,QAAS,CAACE,GAAI,CAACC,KAAM,iBACrBC,aAAc,CAACF,GAAI,CAACC,KAAM,gBAC1BE,YAAa,CAACH,GAAI,CAACC,KAAM,UACzBG,MAAO,CAACJ,GAAI,CAACC,KAAM,eAAgBI,WAAW,GAC9CC,YAAa,CAACN,GAAI,CAACC,KAAM,aACzBM,SAAU,CAACP,GAAI,CAACC,KAAM,eAAgBI,WAAW,EAAMG,aAAY,MA8FxDC,MA1Ff,WACE,IADa,EAMaC,sBALV,SAACC,EAAcC,GAAf,OAAyBf,EAAaE,OAAOY,GAAcX,GAAGY,IAAUf,EAAaC,UAKvDD,EAAaC,SAN9C,mBAMNe,EANM,KAMCC,EAND,OAOaC,mBAAS,MAPtB,mBAONC,EAPM,KAOCC,EAPD,OAQmBF,mBAAS,MAR5B,mBAQNG,EARM,KAQIC,EARJ,OASiBJ,mBAAS,IAT1B,mBASNK,EATM,KASGC,EATH,KAUPC,EAAWC,mBACXC,EAAWD,mBAKXtB,EAAO,kBAAMa,EAAS,SAyCtBW,EAAc,CAClB3B,QAAS,CAAE4B,KAAM,aAAcC,OAxClB,uCAAG,4BAAAC,EAAA,6DAEhB3B,IAFgB,SAIa4B,MAJb,OAIVC,EAJU,OAKhBb,EAASa,GAGT7B,IARgB,2CAAH,sDAyCbC,aAAc,CAACwB,KAAM,oBACrBvB,YAAa,CAACuB,KAAM,eAAgBC,OAAQ,kBAAML,EAASS,QAAQC,UACnE5B,MAAO,CAACsB,KAAM,WAAYC,OAjBd,uCAAG,4BAAAC,EAAA,6DACf3B,IADe,SAEOe,EAAMiB,SAAST,EAASO,SAF/B,OAETX,EAFS,OAGfC,EAAWD,GACXnB,IAJe,2CAAH,sDAkBZK,YAAa,CAACoB,KAAM,cAAeC,OAAQ,cAC3CpB,SAAU,CAACmB,KAAM,QAASC,OAZjB,uCAAG,sBAAAC,EAAA,sDACZP,EAAW,IACXpB,IAFY,2CAAH,uDAnDE,EAoEoCJ,EAAaE,OAAOc,GApExD,IAoENR,iBApEM,aAoEaG,mBApEb,SAsEb,OACI,6BACGH,GAAa,yBAAK6B,IAAK,UAAUC,IAAOjB,EAAUkB,IAAOZ,IAC1D,2BAAOa,KAAK,OAAOC,OAAS,UAAUC,QAAU,SAASH,IAAOd,EAAUkB,SA1C3D,SAAAC,GAMnB,GALgBA,EAAEC,OAAXC,MAKEC,OAAS,EAAG,CACnB,IAAMC,EAAMC,IAAIC,gBAAgBN,EAAEC,OAAOC,MAAM,IAC/CxB,EAAY0B,GACZ5C,QAmCGO,GACG,4BACGY,EAAQ4B,KAAI,gBAAGC,EAAH,EAAGA,UAAWC,EAAd,EAAcA,YAAd,OACT,wBAAIC,IAAKF,GAAT,UAAwBA,EAAxB,eAAsD,IAAdC,GAAmBE,QACvD,SAMd,4BAAQC,QAAW5B,EAAYZ,GAAOc,QAASF,EAAYZ,GAAOa,QC1FtD4B,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD6H3C,kBAAmBC,WACrBA,UAAUC,cAAc5D,MAAM6D,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.e726f60a.chunk.js","sourcesContent":["import React, {useReducer, useState, useRef} from \"react\";\nimport * as mobilenet from \"@tensorflow-models/mobilenet\";\nimport \"./App.css\";\n\n// Represents each of the 6 states in the application\nconst stateMachine = {\n  initial: \"initial\",\n  states: {\n    initial: {on: {next: \"loadingModel\" }},\n    loadingModel: {on: {next: \"awaitUpload\"}},\n    awaitUpload: {on: {next: \"ready\"}},\n    ready: {on: {next: \"classifying\"}, showImage: true},\n    classifying: {on: {next: \"complete\"}},\n    complete: {on: {next: \"awaitUpload\"}, showImage: true, showResults:true}\n  }\n};\n\nfunction App() {\n  const reducer = (currentState, event) => stateMachine.states[currentState].on[event] || stateMachine.initial;\n\n  // STATES USED\n  // state: a string for current state\n  // dispatch: fires an  event into the reducer to get a new state\n  const [state, dispatch] = useReducer(reducer, stateMachine.initial);\n  const [model, setModel] = useState(null);\n  const [imageURL, setImageUrl] = useState(null);\n  const [results, setResults] = useState([]);\n  const inputRef = useRef();\n  const imageRef = useRef();\n\n  // FUNCTIONS\n\n\n  const next = () => dispatch('next');\n\n  const loadModel = async () => {\n    //first transition to loading the model\n    next();\n\n    const mobilenetModel = await mobilenet.load();\n    setModel(mobilenetModel);\n\n    //next transition to await\n    next();\n  };\n\n  // rep invariant: app only handles one image at a time (first\n  //                    item in the array of files ONLY)\n  const handleUpload = e => {\n    const {files} = e.target;\n\n    // an image that we need to turn into an url\n    //  which we will use as the source of an image\n    //  element.\n    if(files.length > 0) {\n      const url = URL.createObjectURL(e.target.files[0]);\n      setImageUrl(url);\n      next();\n    }\n  };\n\n  const identify = async () => {\n    next();\n    const results = await model.classify(imageRef.current);\n    setResults(results);\n    next();\n  };\n\n  const reset = async () => {\n    setResults([]);\n    next();\n  };\n\n\n  const buttonProps = {\n    initial: { text: 'Load Model', action: loadModel},\n    loadingModel: {text: 'Loading Model...'},\n    awaitUpload: {text: 'Upload Photo', action: () => inputRef.current.click()},\n    ready: {text: 'Identify', action: identify},\n    classifying: {text: 'Identifying', action: () => {}},\n    complete: {text: 'Reset', action: reset}\n  };\n\n  // we set showImage to be false as a default to ensure that we don't\n  // cause any errors in image HTML\n  const {showImage = false, showResults = false} = stateMachine.states[state];\n\n  return (\n      <div>\n        {showImage && <img alt= \"preview\" src = {imageURL} ref = {imageRef}/>}\n        <input type=\"file\" accept = \"image/*\" capture = \"camera\" ref = {inputRef} onChange = {handleUpload}/>\n\n        {showResults && (\n            <ul>\n              {results.map(({ className, probability }) => (\n                  <li key={className}>{`${className}: %${(probability * 100).toFixed(\n                      2\n                  )}`}</li>\n              ))}\n            </ul>\n        )}\n\n        <button onClick = {buttonProps[state].action}>{buttonProps[state].text}</button>\n      </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}